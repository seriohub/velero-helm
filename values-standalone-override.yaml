# This file contains the minimum required keys that need to be configured for a proper standalone installation.
# For the complete list, you can refer to the values.yaml file.

# ------------------------
# Global
# ------------------------
global:
  veleroNamespace: velero
  clusterName:  cluster-name

# ------------------------
# API Config
# ------------------------
apiConfig:
  defaultAdminUsername: "<REPLACE_ME>" # For default BUILT-IN authentication
  defaultAdminPassword: "<REPLACE_ME>" # For default BUILT-IN authentication
  
  # Enabled inspect backup feature
  inspectBackupEnabled: false # bool - Requires cluster-wide read permissions (see RBAC config)

# ------------------------
# Watchdog Cron
# ------------------------
report:
  schedule: 0 8 * * *

# ------------------------
# You can use NodePort, Ingress, or simply create a Service and customize access according to your needs.
# It is necessary to enable only one option at a time.
# ------------------------

#
# Nodeport
#
uiNp:
  enabled: false
  # ip: "10.10.0.100"  # ip address of your cluster
  # apiPort: "30001"
  # uiPort: "30002"

#
# Ingress
#
uiIngress:
  enabled: false
  # ingressClassName: nginx
  # metadata:
  #   annotations:
  #     cert-manager.io/cluster-issuer: "letsencrypt-prod"
  #     nginx.ingress.kubernetes.io/proxy-read-timeout: '3600'
  #     nginx.ingress.kubernetes.io/proxy-send-timeout: '3600'
  #     ingress.kubernetes.io/proxy-connect-timeout: "3600"
  spec:
    tls:
  #  - hosts:
  #    - vui.<your-domain>
  #    secretName: vui-tls

#
# ClusterIP
#
# For different ingress configurations, you can create a ClusterIP service.
# REQUIRED: Manual configuration in the `vui-ui-configmap` for the variables 
#           `NEXT_PUBLIC_VELERO_API_URL_1` and `NEXT_PUBLIC_VELERO_API_WS_1`.
# OPTIONAL: Manual configuration in the `vui-api-configmap` for the variable `ORIGINS_1`.
# 
# Feedback and suggestions for improving this configuration are welcome.
clusterIpService:
  enabled: false

# ------------------------
# Authentication
# ------------------------
# -- Enable or disable authentication (true/false)
enabled: "true"
# -- Type of authentication: BUILT-IN (default), LDAP
type: "BUILT-IN"
# -- LDAP Configuration (used when Type is LDAP)
ldap:
  # -- Complete LDAP URI, including protocol and port (e.g., ldaps://ldap.example.com:636)
  uri: "ldaps://ldap.example.com:636"
  # -- Use SSL for LDAP connection (true/false)
  useSsl: "true"
  # -- Base Distinguished Name (DN) for LDAP searches
  baseDn: "dc=example,dc=com"
  # -- LDAP Service Account: It is recommended to use a read-only account
  bindDn: "cn=admin,dc=example,dc=com"
  # -- LDAP Service Secret: **Should be stored securely using Kubernetes Secrets!**
  bindPassword: "<secret>" 
  # -- LDAP User Search Filter (use {username} as a placeholder)
  userSearchFilter: "(&(objectClass=person)(uid={username}))"
  authz:
    # -- Enable or disable LDAP authorization (true/false)
    enabled: "true"
    # -- Authorization strategy: GROUP or ATTRIBUTE
    strategy: "GROUP"
    # -- Base Distinguished Name (DN) for LDAP authorization through group membership
    authzBaseDn: "cn=admins,ou=groups,dc=example,dc=com"
    # -- LDAP Authorization Filter for groups (use {user_dn} as a placeholder)
    authzFilter: "(&(objectClass=groupOfNames)(member={user_dn}))"
    # -- LDAP Attribute for authorization (used when Strategy is ATTRIBUTE), ex: department
    authzAttribute: ""
    # -- LDAP Attribute Value for authorization (used when Strategy is ATTRIBUTE), ex: IT
    authzValue: ""
