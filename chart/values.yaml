#
# Global
#
global:
  # -- Name of the namespace where vmware-tanzu/velero is deployed
  veleroNamespace: velero
  # -- Agent mode: If true, the UI will not be installed
  agentMode: false
  # -- ClusterName
  clusterName: <cluster-name>
  # -- Enable in cluster mode
  k8SInclusterMode: "true"

#
# API
#
api:
  apiServer:
    image:
      # -- Image Registry
      registry: docker.io
      # -- Image Repository
      repository: dserio83/velero-api
      # -- Image Tag
      tag: 0.2.3
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    # -- SecurityContext for Pod
    podSecurityContext:
      enabled: false
      seccompProfile:
        type: RuntimeDefault
    # -- SecurityContext for Container
    securityContext:
      enabled: false
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65534
    # -- Operator nodeSelector
    nodeSelector: {}
    # -- Operator tolerations
    tolerations: []
    # -- Operator affinity
    affinity: {}
    # -- Resources for the Operator
    resources: {}
    # requests:
    #   cpu: 50m
    #   memory: 128Mi
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # -- VolumeMounts
    volumeMounts:
    # - name: velero-api
    #   mountPath: /usr/local/bin
    # -- Volumes
    volumes:
    # - name: velero-api
    #   emptyDir: {}
    # -- Add annotations to deployment
    annotations: {}
    # -- Add annotations to pods
    podAnnotations: {}
  ports:
  - name: velero-api
    port: 80
    protocol: TCP
    targetPort: api
  replicas: 1

#
# API Config
#
apiConfig:
  # -- Token validity after the creation (minutes)
  apiTokenExpirationMin: "60"
  # -- Token validity after the creation (days)
  apiTokenRefreshExpirationDays: "7"
  # -- Enabled/Disabled the fastapi documentation user interfaces
  apiEnableDocumentation: "1"
  # -- Socket bind port
  apiEndpointPort: "8001"
  # -- Socket bind host
  apiEndpointUrl: 0.0.0.0
  # -- Custom security rate limiter: 60 seconds max requests 10
  apiRateLimiterCustom1: Security:xxx:60:100
  # -- Rate limiter: 60 seconds max requests 10
  apiRateLimiterL1: "60:100"
  # -- Debug level info
  debugLevel: info
  # -- Destination folder when executing velero backup download
  veleroInspectFolder: /tmp/velero-inspect-backups
  # -- Allowed origin
  origins1: '*'
  # -- Velero restic password
  resticPassword: static-passw0rd
  # -- If true user can have a weak password, otherwise is required a strong password
  securityDisableUsersPwdRate: "1"
  # -- Path where create the SQL-Lite database used for storing the users credentials
  securityPathDatabase: ./data
  # Optional: Secret key used for JWT creation
  # securityTokenKey: <your-token>
  # -- Default admin username
  defaultAdminUsername: admin
  # -- Default admin password
  defaultAdminPassword: admin
  # Optional: Name of pre-existing Secret, must include subsequent secrets
  # -- Reference to own secret
  existingSecret:
  # <AWS_ACCESS_KEY_ID>,<AWS_SECRET_ACCESS_KEY>,<RESTIC_PASSWORD>,<SECURITY_PATH_DATABASE>,<DEFAULT_ADMIN_USERNAME>,<DEFAULT_ADMIN_PASSWORD>
  # Optional: <SECURITY_TOKEN_KEY>
  # -- Enabled inspect backup feature: The inspect backup feature requires read permissions across the entire cluster. See ./template/rbac/admin/cluster_readonly_clusterrole.yaml for details.
  inspectBackupEnabled: "false"

  # Storage Configuration
  storage:
    # -- Enable persistence for API
    enabled: false
    # -- StorageClassName
    storageClassName: ""
    # -- Storage AccessMode
    accessModes:
      - ReadWriteOnce
    # -- Storage requested resources
    resources:
      requests:
        storage: 100Mi

#
# API Service Account
#
apiSa:
  serviceAccount:
    annotations: {}

#
# UI Image
#
ui:
  ports:
  - name: velero-ui
    port: 80
    protocol: TCP
    targetPort: run
  replicas: 1
  webServer:
    image:
      # -- Image Registry
      registry: docker.io
      # -- Image Repository
      repository: dserio83/velero-ui
      # -- Image Tag
      tag: 0.2.3
    # -- Image pull policy
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    # -- SecurityContext for Pod
    podSecurityContext:
      enabled: false
      seccompProfile:
        type: RuntimeDefault
    # -- SecurityContext for Container
    securityContext:
      enabled: false
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65534
    # -- Operator nodeSelector
    nodeSelector: {}
    # -- Operator tolerations
    tolerations: []
    # -- Operator affinity
    affinity: {}
    # -- Resources for the Operator
    resources: {}
    # requests:
    #   cpu: 50m
    #   memory: 128Mi
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # -- VolumeMounts
    volumeMounts:
    # - name: velero-api
    #   mountPath: /usr/local/bin
    # -- Volumes
    volumes:
    # - name: velero-api
    #   emptyDir: {}
    # -- Add annotations to deployment
    annotations: {}
    # -- Add annotations to pods
    podAnnotations: {}

#
# UI Config
#
uiConfig:
  # -- Milliseconds delay for datatable update after each operation
  nextPublicRefreshDatatableAfter: "1500"
  # -- Polling task in progress updates in milliseconds
  nextPublicRefreshRecent: "5000"
  # -- Url to http velero-api project
  nextPublicVeleroApiUrl: http://10.10.0.100
  # -- Url to ws velero-api project
  nextPublicVeleroApiWs: ws://10.10.0.100
  # -- Enabled UI logger
  nextPublicLoggerEnabled: false
  #
  # Experimental
  #
  experimental: false
  # -- Cluster name where velero-api 2 is deployed
  exNextPublicVeleroApiName2: ""
  # -- Url to http velero-api 2 project
  exNextPublicVeleroApiUrl2: ""
  # -- Url to ws velero-api 2 project
  exNextPublicVeleroApiWs2: ""

#
# VUI access with nodeport
#
uiNp:
  # -- Enable or disable nodeport
  enabled: true
  # -- Any ip address of your cluster
  ip: ""
  # -- API port
  apiPort: "30001"
  # -- UI port
  uiPort: "30002"

#
# VUI access with ingress
#
uiIngress:
  # -- Enable or disable ingress
  enabled: false
  # -- Ingress class name
  ingressClassName: nginx
  metadata:
    annotations:
      # cert-manager.io/cluster-issuer: "letsencrypt-prod"
  spec:
    tls:
    # - hosts:
    #   - velero-ui.domain.com
    #   secretName: velero-ui-tls

#
# VUI custom service, create ClusterIpOnly
#
clusterIpService:
  # -- Enable or disable ClusterIP services
  enabled: false

#
# Service Account
#
k8SReadOnlyServiceAccount:
  serviceAccount:
    annotations: {}

#
# Watchdog Cron
#
report:
  failedJobsHistoryLimit: 0
  # -- Cron for full report
  schedule: 0 8 * * *
  successfulJobsHistoryLimit: 0
  veleroWatchdogReport:
    image:
      # -- Image Registry
      registry: docker.io
      # -- Image Repository
      repository: dserio83/velero-watchdog
      # -- Image Tag
      tag: 0.1.7
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    # -- SecurityContext for Pod
    podSecurityContext:
      enabled: false
      seccompProfile:
        type: RuntimeDefault
    # -- SecurityContext for Container
    securityContext:
      enabled: false
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65534
    # -- Operator nodeSelector
    nodeSelector: {}
    # -- Operator tolerations
    tolerations: []
    # -- Operator affinity
    affinity: {}
    # -- Resources for the Operator
    resources: {}
    # requests:
    #   cpu: 50m
    #   memory: 128Mi
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # -- VolumeMounts
    volumeMounts:
    # - name: velero-api
    #   mountPath: /usr/local/bin
    # -- Volumes
    volumes:
    # - name: velero-api
    #   emptyDir: {}
    # -- Add annotations to cronjob
    annotations: {}
    # -- Add annotations to pods
    podAnnotations: {}

#
# Watchdog Daemon
#
watchdog:
  replicas: 1
  veleroMonitoring:
    image:
      # -- Image Registry
      registry: docker.io
      # -- Image Repository
      repository: dserio83/velero-watchdog
      # -- Image Tag
      tag: 0.1.7
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    # -- SecurityContext for Pod
    podSecurityContext:
      enabled: false
      seccompProfile:
        type: RuntimeDefault
    # -- SecurityContext for Container
    securityContext:
      enabled: false
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65534
    # -- Operator nodeSelector
    nodeSelector: {}
    # -- Operator tolerations
    tolerations: []
    # -- Operator affinity
    affinity: {}
    # -- Resources for the Operator
    resources:
      limits:
        cpu: 500m
        memory: 1256Mi
      requests:
        cpu: 250m
        memory: 256Mi
    # -- VolumeMounts
    volumeMounts:
    # - name: velero-api
    #   mountPath: /usr/local/bin
    # -- Volumes
    volumes:
    # - name: velero-api
    #   emptyDir: {}
    # -- Add annotations to deployment
    annotations: {}
    # -- Add annotations to pods
    podAnnotations: {}

#
# Watchdog Cluster IP
#
watchdogClusterip:
  port: 8001
  targetPort: 8001

#
# Watchdog Config
#
watchdogConfig:
  # -- Socket bind host
  apiEndpointURL: "0.0.0.0"
  # -- Socket bind port
  apiEndpointPort: "8001"
  # -- View debugging information.
  debug: "false"
  # -- Debug level information.
  debugLevel: info
  # -- Enable watcher for backups without schedule or last backup for each schedule
  backupEnable: "true"
  # -- Enable watcher for schedule
  scheduleEnable: "true"
  # -- Number of days to backup expiration below which to display a warning about the backup
  expiresDaysWarning: "29"
  # -- Cycle time (seconds)
  processCycleSec: "300"
  # -- Skip notification new completed backup
  notificationSkipCompleted: "true"
  # -- Skip notification new in progress backup
  notificationSkipInProgress: "true"
  # -- Skip notification backup removed
  notificationSkipRemoved: "true"
  # -- Skip notification backup deleting
  notificationSkipDeleting: "true"
  # -- User name account
  emailAccount: <email>
  # -- Enable email notification
  emailEnable: "false"
  # -- Email password account
  emailPassword: <pwd>
  # -- Email recipients semicolon separated
  emailRecipients: <recipients>
  # -- SMTP port
  emailSmtpPort: <smtp-port>
  # -- SMTP server
  emailSmtpServer: <smtp-server>
  # -- Send notification message at startup
  sendStartMessage: "true"
  # -- Send report at startup
  sendReportAtStartup: "false"
  # -- Telegram chat id where send the notifications
  telegramChatId: <chat-id>
  # -- Enable telegram notification
  telegramEnable: "false"
  # -- Token for access to Telegram bot via Http API
  telegramToken: <token>
  # -- Add a prefix to backup items in reports
  reportBackupItemPrefix: ""
  # -- Add a prefix to schedule items in reports
  reportScheduleItemPrefix: ""
  # -- Channel id where sens the notification
  slackChannel: <channel-id>
  # -- Enable Slack notification
  slackEnable: "false"
  # -- Token for access to Slack via Http API
  slackToken: <token>

#
# Authentication
#
authentication:
  # -- Enable or disable authentication (true/false)
  enabled: "true"
  # -- Type of authentication: BUILT-IN (default), LDAP
  type: "BUILT-IN"
  # -- LDAP Configuration (used when Type is LDAP)
  ldap:
    # -- Complete LDAP URI, including protocol and port (e.g., ldaps://ldap.example.com:636)
    uri: "ldaps://ldap.example.com:636"
    # -- Use SSL for LDAP connection (true/false)
    useSsl: "true"
    # -- Base Distinguished Name (DN) for LDAP searches
    baseDn: "dc=example,dc=com"
    # -- LDAP Service Account: It is recommended to use a read-only account
    bindDn: "cn=admin,dc=example,dc=com"
    # -- LDAP Service Secret: **Should be stored securely using Kubernetes Secrets!**
    bindPassword: "<secret>"
    # -- LDAP User Search Filter (use {username} as a placeholder)
    userSearchFilter: "(&(objectClass=person)(uid={username}))"
    authz:
      # -- Enable or disable LDAP authorization (true/false)
      enabled: "true"
      # -- Authorization strategy: GROUP or ATTRIBUTE
      strategy: "GROUP"
      # -- Base Distinguished Name (DN) for LDAP authorization through group membership
      authzBaseDn: "cn=admins,ou=groups,dc=example,dc=com"
      # -- LDAP Authorization Filter for groups (use {user_dn} as a placeholder)
      authzFilter: "(&(objectClass=groupOfNames)(member={user_dn}))"
      # -- LDAP Attribute for authorization (used when Strategy is ATTRIBUTE)
      authzAttribute: ""
      # -- LDAP Attribute Value for authorization (used when Strategy is ATTRIBUTE)
      authzValue: ""
