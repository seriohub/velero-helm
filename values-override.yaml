# This file contains the minimum required keys that need to be configured for a proper installation.
# For the complete list, you can refer to the values.yaml file.

#
# Global
#
global:
  veleroNamespace: velero
  # agentMode: false # "True" for deployments in environments that use Velero-Core.
  # clusterName: <your-cluster-name>

#
# API Config
#
apiConfig:
  # To generate a fixed secure random secret key use the command: openssl rand -hex 32
  # If not specified, it is automatically generated at startup
  # securityTokenKey:
  
  # Specify the version of the Velero client you want to use.
  veleroCliVersion: v1.13.2
  
  # apiTokenExpirationMin: "30"

  storage:
    enabled: false
    storageClassName: <your-storage-class-name>

#
# Watchdog Cron
#
report:
  schedule: 0 8 * * *

#
# Watchdog Daemon Config
#
watchdogConfig:
  # processCycleSec: 300
  # expiresDaysWarning: 29
  notificationSkipCompleted: "False"
  # notificationSkipInProgress: "True"
  # notificationSkipRemoved: "True"
  # notificationSkipDeleting: "True"
   
  # email
  emailEnable: "False"
  emailAccount: "<your-email>"
  emailPassword: "<your-password>"
  emailRecipients: "<email-recipents-comma-saparted>"
  emailSmtpPort: "<smtp-port>"
  emailSmtpServer: "<smtp-server>"
  
  # slack
  slackEnable: "False"
  slackChannel: "<channel-id>"
  slackToken: "<token>"
  
  # telegram
  telegramEnable: "False"
  telegramChatId: "<telegram-chat-id>"
  telegramToken: "<telegram-token>"

#
# uiConfig
# you can enable an experimental function to add a second cluster to the login screen
#
# uiConfig:
  # experimental: true
  # exNextPublicVeleroApiName2: "your-cluster-name-2"
  # exNextPublicVeleroApiUrl2: "https://your-url-api-2/api"
  # exNextPublicVeleroApiWs2: "wss://your-url-api-2"

#
# You can use NodePort, Ingress, or simply create a Service and customize access according to your needs.
# It is necessary to enable only one option at a time.
#

#
# Nodeport
#
uiNp:
  enabled: false
  # ip: "10.10.0.100"  # any ip address of your cluster
  # apiPort: "30001"
  # uiPort: "30002"

#
# Ingress
#
uiIngress:
  enabled: false
  # ingressClassName: nginx
  # metadata:
  #   annotations:
  #     cert-manager.io/cluster-issuer: "letsencrypt-prod" 
  spec:
    tls:
  #  - hosts:
  #    - velero.<your-domain>
  #    secretName: velero-ui-tls

#
# ClusterIP
#

# For different ingress configurations, you can create a ClusterIP service.
# REQUIRED: Manual configuration in the `velero-ui-configmap` for the variables 
#           `NEXT_PUBLIC_VELERO_API_URL_1` and `NEXT_PUBLIC_VELERO_API_WS_1`.
# OPTIONAL: Manual configuration in the `velero-api-configmap` for the variable `ORIGINS_1`.
# 
# Feedback and suggestions for improving this configuration are welcome.
clusterIpService:
  enabled: false

#
# Authentication
#
# -- Enable or disable authentication (true/false)
enabled: "True"
# -- Type of authentication: BUILT-IN (default), LDAP
type: "BUILT-IN"
# -- LDAP Configuration (used when Type is LDAP)
ldap:
  # -- Complete LDAP URI, including protocol and port (e.g., ldaps://ldap.example.com:636)
  uri: "ldaps://ldap.example.com:636"
  # -- Use SSL for LDAP connection (true/false)
  useSsl: "True"
  # -- Base Distinguished Name (DN) for LDAP searches
  baseDn: "dc=example,dc=com"
  # -- LDAP Service Account: It is recommended to use a read-only account
  bindDn: "cn=admin,dc=example,dc=com"
  # -- LDAP Service Secret: **Should be stored securely using Kubernetes Secrets!**
  bindPassword: "<secret>" 
  # -- LDAP User Search Filter (use {username} as a placeholder)
  userSearchFilter: "(&(objectClass=person)(uid={username}))"
  authz:
    # -- Enable or disable LDAP authorization (true/false)
    enabled: "True"
    # -- Authorization strategy: GROUP or ATTRIBUTE
    strategy: "GROUP"
    # -- Base Distinguished Name (DN) for LDAP authorization through group membership
    authzBaseDn: "cn=admins,ou=groups,dc=example,dc=com"
    # -- LDAP Authorization Filter for groups (use {user_dn} as a placeholder)
    authzFilter: "(&(objectClass=groupOfNames)(member={user_dn}))"
    # -- LDAP Attribute for authorization (used when Strategy is ATTRIBUTE), ex: department
    authzAttribute: ""
    # -- LDAP Attribute Value for authorization (used when Strategy is ATTRIBUTE), ex: IT
    authzValue: ""
